#version 330

precision mediump float;

// surface normal and vertex positions from VS
varying vec3 normal;  
varying vec3 vertPos;  

// ambient, diffuse and specular coefficients
uniform float Ka = 1.0f;
uniform float Kd = 1.0f;
uniform float Ks = 1.0f; 
uniform float shininessVal = 60.0f; // Shininess
// Material color
uniform vec3 lightColor = vec3(0.9, 0.9, 0.9);
uniform vec3 ambientColor = vec3(0.9, 0.9, 0.9);
uniform vec3 diffuseColor = vec3(1.0, 1.0, 1.0);
uniform vec3 specularColor = vec3(1.0, 1.0, 1.0);
uniform vec3 lightPos1 = vec3(-12.0f, 5.0f, 8.0f); // Light position

in vec2 TexCoord;
uniform sampler2D ourTexture;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

uniform Material material;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float constant;
    float linear;
    float quadratic;
};

#define NUM_POINT_LIGHTS 2

uniform Light pointLights[NUM_POINT_LIGHTS];

// function for point lights
vec3 calculatePointLights(Light pointLights, vec3 norm, vec3 fragPos, vec3 viewVec);

void main() {
    vec3 N = normalize(normal);
    vec3 V = normalize(-vertPos);
    vec3 result = vec3(0.0f, 0.0f, 0.0f);
    for(int i = 0; i < NUM_POINT_LIGHTS; i++) {
        result = result + calculatePointLights(pointLights[i], N, vertPos, V);
    }
   //vec4 texColor = texture(ourTexture, TexCoord);
    gl_FragColor = vec4(result, 1.0);
}

/*void main() {
    // ambient lighting
    vec3 ambient = pointLights[0].ambient;

    // Viewer vector
    vec3 V = normalize(-vertPos);
    // diffuse lighting
    vec3 N = normalize(normal);
    vec3 L = normalize(pointLights[0].position - vertPos);

    // get dot product of normal and light vectors
    float lambertian = max(dot(N, L), 0.0);
    vec3 diffuse = pointLights[0].diffuse * (lambertian * material.diffuse);

    // specular
    float spec = 0.0;
    // if the dot product is greater than 0 then the surface is not pure lambertian
    // reflection vector
    vec3 R = reflect(-L, N);
    // viewer vector
    // calculate the specular angle by getting the dot of the reflection and viewer vectors
    float specAngle = max(dot(R, V), 0.0);
    // specular lighting is the angle to the power of the shininess value 
    spec = pow(specAngle, material.shininess);
    vec3 specular = pointLights[0].specular * (spec * material.specular);

    // find the result of the lighting
    //for(int i = 0; i < NUM_POINT_LIGHTS; i++) {
        //vec3 result = calculatePointLight(pointLights[0], N, vertPos, V);
    //}
    // create the texture colour
    vec4 texColor = texture(ourTexture, TexCoord);
    // add the ambient, lambertian and specular terms and multiply by texture colour.
    vec3 result = ambient + diffuse + specular;
    gl_FragColor = vec4(result, 1.0) * texColor;
    //gl_FragColor = vec4(result, 1.0);
}*/

vec3 calculatePointLights(Light pointLights, vec3 norm, vec3 fragPos, vec3 viewVec) {
    vec3 lightVec = normalize(pointLights.position - fragPos);
    // diffuse
    float lambertian = max(dot(norm, lightVec), 0.0);
    // specular
    vec3 R = reflect(-lightVec, norm);
    // calculate the specular angle by getting the dot of the reflection and viewer vectors
    float specAngle = max(dot(R, viewVec), 0.0);
    // specular lighting is the angle to the power of the shininess value 
    float spec = pow(specAngle, material.shininess);
    float dist = length(pointLights.position - fragPos);
    float attenuation = 1.0 / (pointLights.constant + pointLights.linear * dist + pointLights.quadratic * (dist * dist));
    vec3 ambient = pointLights.ambient * vec3(texture(material.diffuse, TexCoord));
    vec3 diffuse = pointLights.diffuse * lambertian * vec3(texture(material.diffuse, TexCoord));
    vec3 specular = pointLights.specular * spec * vec3(texture(material.specular, TexCoord));
    //ambient = ambient * attenuation;
    //diffuse = diffuse * attenuation;
    //specular = specular * attenuation;
    vec3 res = ambient + diffuse + specular;
    return res;
}
